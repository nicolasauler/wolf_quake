# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

orbs:
  codecov: codecov/codecov@4.0.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  build-and-test:
    docker:
      - image: cimg/rust:1.77.0
    environment:
      # Fail the build if there are warnings
      RUSTFLAGS: '-D warnings'
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      # If you have committed your Cargo.lock file to version control
      # delete this step.
      - run:
          name: Calculate dependencies
          command: cargo generate-lockfile
      - restore_cache:
          keys:
            - v1-cargo-cache-{{ arch }}-{{ checksum "Cargo.lock" }}
      - run:
          name: Build all targets
          command: cargo build
      - save_cache:
          paths:
            - /home/circleci/.cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          key: v1-cargo-cache-{{ arch }}-{{ checksum "Cargo.lock" }}
      - run:
          name: Run all tests
          command: cargo test

  security:
    docker:
      - image: cimg/rust:1.77.0
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - run:
          name: Cache permission
          command: |
            sudo chown -R $(whoami):$(id -ng) /home/circleci/.cargo/bin/cargo
      - restore_cache:
          keys:
            - v1-cargo-audit-{{ arch }}
      - run:
          name: Install dependency auditing tool
          command: cargo install cargo-audit
      - save_cache:
          paths:
            - /home/circleci/.cargo/bin/cargo
          key: v1-cargo-audit-{{ arch }}
      - run:
          name: Check for known security issues in dependencies
          command: cargo audit

  format:
    docker:
      - image: cimg/rust:1.77.0
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - run:
          name: Install formatter
          command: rustup component add rustfmt
      - run:
          name: Formatting
          command: cargo fmt --all -- --check

  lint:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      - image: cimg/rust:1.77.0
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - run:
          name: Install Clippy
          command: rustup component add clippy
      - run:
          name: Linting
          command: cargo clippy --all -- -D warnings -D dead-code # only want dead code problems in CI and pre-commit

  msrv:
    docker:
      - image: cimg/rust:1.77.0
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - run:
          name: Cache permission
          command: |
            sudo chown -R $(whoami):$(id -ng) /home/circleci/.cargo/bin/cargo
      - restore_cache:
          keys:
            - v1-cargo-msrv-{{ arch }}
      - run:
          name: Install msrv checking tool
          command: cargo install cargo-msrv --version 0.16.0-beta.20
      - save_cache:
          paths:
            - /home/circleci/.cargo/bin/cargo
          key: v1-cargo-msrv-{{ arch }}
      - run:
          name: Check if MSRV specified is ok
          command: cargo msrv verify

  doc:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      - image: cimg/rust:1.77.0
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - run:
          name: Install nightly toolchain
          command: rustup install nightly
      - run:
          name: Generating documentation
          command: rustup run nightly cargo doc --no-deps --all-features

  coverage:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      - image: cimg/rust:1.77.0
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - run:
          name: Install nightly toolchain
          command: rustup install nightly
      - run:
          name: Install llvm-tools-preview
          command: rustup component add llvm-tools-preview --toolchain nightly-x86_64-unknown-linux-gnu
      - run:
          name: Install codecov tool
          command: cargo install cargo-llvm-cov
      - run:
          name: Running code coverage
          command: rustup run nightly cargo llvm-cov --locked --all-features --lcov --output-path lcov.info
      - codecov/upload:
          file: './lcov.info'
          #token: $CODECOV_TOKEN already default


# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  build-test-sanitize:
    jobs:
      - build-and-test:
          filters:
            tags:
              only: /.*/
      - security:
          filters:
            tags:
              only: /.*/
      - format:
          filters:
            tags:
              only: /.*/
      - lint:
          filters:
            tags:
              only: /.*/
      - msrv:
          requires:
            - build-and-test
            - security
            - format
            - lint
          filters:
            tags:
              only: /.*/
      - doc:
          requires:
            - build-and-test
            - security
            - format
            - lint
          filters:
            branches:
              only: main

      - coverage:
          requires:
            - msrv
            - doc
          filters:
            tags:
              only: /.*/
